name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  
  



jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Upload code
        uses: actions/upload-artifact@v3
        with:
          name: code
          path: .
          retention-days: 1

  build:
    needs: source
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.5'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update
          sudo apt-get install -y wget unzip  # Install tools for downloading Edge and WebDriver
          
          # Install Microsoft Edge
          wget https://packages.microsoft.com/keys/microsoft.asc
          sudo apt-key add microsoft.asc
          sudo wget https://packages.microsoft.com/microsoft-edge-stable.deb
          sudo dpkg -i microsoft-edge-stable.deb
          sudo apt-get install -f  # Fix dependencies if necessary
          
          # Install Edge WebDriver
          wget https://msedgedriver.azureedge.net/$(curl -s https://msedgedriver.azureedge.net/LATEST_STABLE)edgedriver_linux64.zip
          unzip msedgedriver_linux64.zip
          sudo mv msedgedriver /usr/local/bin/

      - name: Install npm packages and run build command
        run: |
          cd ./frontend
          npm install
          npm run build
          rm -rf node_modules

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Upload code
        uses: actions/upload-artifact@v3
        with:
          name: code
          path: .
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.5'
          cache: 'pip'

      # Restore the cached virtual environment
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-
      
      - name: Run tests
        run: |
          source .venv/bin/activate
          cd ./tests 
          # Set environment variable for Edge WebDriver path
          export EDGE_BIN_PATH=/usr/bin/microsoft-edge
          pytest --html-report=./report/report.html --title='PYTEST REPORT'
      
      - name: Upload test report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: ./backend/report

  deploy:
    if: success()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/blog-and-react-js-blog:latest .

      - name: Login and Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/blog-and-react-js-blog:latest
          
      - name: Deploy to render.com
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
          image-url: ${{ secrets.DOCKER_USERNAME }}/blog-and-react-js-blog:latest
          render-api-key: ${{ secrets.RENDER_TOKEN }}
          wait-for-deployment: true

  notify:
    if: failure()
    needs: test
    runs-on: ubuntu-latest
    steps:
      # - name: Download code
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: code
      #     path: .

      - name: Send notification
        run: |
          echo "Tests failed, sending notification to developers."
      
      - name: Download tes
